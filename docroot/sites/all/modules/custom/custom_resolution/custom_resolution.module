<?php

/**
 * Implements hook_form_FORM_ID_alter()
 */
function custom_resolution_form_resolution_node_form_alter(&$form, &$form_state, $form_id)
{
  $form['supported_parties_filter'] = array(
    '#type' => 'select',
    '#title' => t('Filter delegates by party'),
    '#options' => _custom_resolution_get_parties(),
    '#weight' => $form['field_resolution_analitic']['#weight'] + 0.5,
  );

  $module_path = drupal_get_path('module', 'custom_resolution');
  $script_path = "{$module_path}/scripts/custom_resolution.js";
  drupal_add_js($script_path);

  /* Hide node title field - it will be generated on node saving */
  $form['title']['#access'] = FALSE;
  $form['title']['#required'] = FALSE;
  $form['#validate'][] = '_custom_resolution_validate_resolution_number';
}

/**
 * Get list of parties for filter on resolution node form
 * @return array
 */
function _custom_resolution_get_parties()
{
  $query = db_select('taxonomy_term_data', 'tax');
  $query->fields('tax', array('name', 'vid'));
  $query->condition('tax.vid', 11);
  $result = $query->execute()->fetchCol();
  $parties = array();
  foreach ($result as $party) {
    $parties[$party] = $party;
  }
  return $parties;
}

/**
 * Implements hook_node_presave()
 */
function custom_resolution_node_presave($node)
{
  $resolution_number = $node->field_resolution_number[LANGUAGE_NONE][0]['value'];
  $resolution_date = $node->field_resolution_date[LANGUAGE_NONE][0]['value'];
  $resolution_time = time($resolution_date);
  $resolution_date_formatted = format_date($resolution_time, 'short');
  $resolution_title = t('Resolution # @number for @date', array(
    '@number' => $resolution_number,
    '@date' => $resolution_date_formatted,
  ));
  $node->title = $resolution_title;
}


/**
 * Validation callback for resolution node form
 * Check if resolution number is unique
 */
function _custom_resolution_validate_resolution_number($form, &$form_state)
{
  $values = $form_state['values'];
  $current_nid = $values['nid'];
  $resolution_number_field = $values['field_resolution_number'];
  $resolution_number_value = $resolution_number_field[LANGUAGE_NONE][0]['value'];

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'resolution');
  $query->fieldCondition('field_resolution_number', 'value', $resolution_number_value);
  $query->addMetaData('account', user_load(1));
  $result = $query->execute();
  if (!empty($result)) {
    $nids = element_children($result['node']);
    if (!$current_nid || !in_array($current_nid, $nids)) {
      form_error($form['field_resolution_number'], 
        t('Resolution # %number already exists', array(
          '%number' => $resolution_number_value,
        )));
    }
  }
}

//-----------------------------------------------------------------------------

/**
 * Parsing list of Kyiv city council delegates
 * Uncomment following lines to enable this feature
 * @todo - create web-interface for advances parsing
 */


// /**
//  * Implements hook_init()
//  */
// function custom_resolution_init()
// {
//   if (isset($_GET['fetch-delegates'])) {
//     _custom_resolution_fetch_delegates();
//   }
// }

// function _custom_resolution_fetch_delegates()
// {
//   $delegates_page = file_get_html('http://kmr.gov.ua/delegates.asp');
//   $base_link = "http://kmr.gov.ua/";
//   foreach ($delegates_page->find('a') as $key => $link) {
//     $href = $link->href;
//     if (strpos($href, 'delegates') > -1 && strpos($href, '?') > -1) {
//       $delegate_link = "{$base_link}{$href}";
//       $delegate = _custom_resolution_fetch_delegate($delegate_link);
//       _custom_resolution_save_delegate($delegate, $key);
//     }
//   }
// }

// function _custom_resolution_fetch_delegate($delegate_link)
// {
//   $delegate_page = file_get_html($delegate_link);
//   $base_link = "http://kmr.gov.ua/";
//   foreach ($delegate_page->find('span[class=title]') as $title) {
//     $title = iconv('Windows-1251', 'UTF-8', $title->innertext);
//   }

//   foreach ($delegate_page->find('img') as $image) {
//     $src = $image->src;
//     if (strpos($src, 'images/person/') > -1) {
//       $delegate_image = $base_link . $src;
//     }
//   }

//   foreach ($delegate_page->find('a') as $link) {
//     $href = $link->href;
//     if (strpos($href, 'faction.asp?IdFaction') > -1) {
//       $fraction = iconv('Windows-1251', 'UTF-8', $link->innertext);
//     }
//   }
//   $delegate = array(
//     'title' => $title,
//     'image' => isset($delegate_image) ? $delegate_image : '',
//     'fraction' => $fraction,
//   );
//   return $delegate;
// }

// function _custom_resolution_save_delegate($delegate, $key)
// {
//   $title = $delegate['title'];
//   $image_src = $delegate['image'];
//   $fraction = $delegate['fraction'];
  
//   $node = entity_create('node', array(
//     'title' => $title,
//     'type' => 'deputat',
//     'uid' => 1,
//   ));

//   $node_wrapper = entity_metadata_wrapper('node', $node);
//   $fraction_id = _custom_resolution_get_fraction_id($fraction);
//   if (isset($node_wrapper->field_fraction)) {
//     $node_wrapper->field_fraction->set($fraction_id);
//   }
//   if ($image_src) {
//     $image_object = _custom_resolution_get_delegate_image($image_src, $key);
//     $fid = $image_object->fid;
//     if (isset($node_wrapper->field_deputat_photo)) {
//       $node_wrapper->field_deputat_photo->file->set($image_object);
//     }
//   }
//   $node_wrapper->save();
// }

// function _custom_resolution_get_fraction_id($fraction)
// {
//   $query = db_select('taxonomy_term_data', 'tax');
//   $query->fields('tax', array('tid', 'vid', 'name'));
//   $query->condition('tax.vid', 11);
//   $query->condition('tax.name', db_like($fraction), 'LIKE');
//   $result = $query->execute()->fetchCol();

//   $tid = empty($result) ? 51 : $result[0];
//   return $tid;
// }

// function _custom_resolution_get_delegate_image($image_src, $key)
// { 
//   $image = file_get_contents($image_src);
//   $saved_image = FALSE;
//   if ($image) {
//     $headers = get_headers($image_src, 1);
//     $content_type = $headers['Content-Type'];
//     $filebase = 'delegate-' . $key;
    
//     switch ($content_type) {
//       case 'image/jpeg' :
//         $filename = "{$filebase}.jpg";
//         break;

//       case 'image/png' :
//         $filename = "{$filebase}.png";
//         break;

//       default :
//         $filename = "{$filebase}.gif";
//     }
//     $destination = "public://deputats/{$filename}";
//     $saved_image = file_save_data($image, $destination, FILE_EXISTS_REPLACE);
//   }
//   return $saved_image;
// }